cel 파일에 저장된 이미지 경로를 읽고, 화면에 해당 이미지를 주기적으로 검색하는 프로그램입니다. 이 과정은 GUI를 사용하여 설정할 수 있으며, 일정 시간 간격으로 검색을 수행합니다. 주요 작업은 OpenCV와 pyautogui를 활용하여 이미지 탐색 및 클릭을 수행하는 것입니다. 코드의 각 부분을 설명하면 다음과 같습니다:

라이브러리 임포트:

pyautogui: 자동화된 GUI 조작을 위해 사용됩니다. 마우스 이동, 클릭, 스크린샷 촬영 등을 처리합니다.
cv2 (OpenCV): 이미지를 읽고 처리하며, 템플릿 매칭을 통해 이미지 검색에 사용됩니다.
numpy: OpenCV와 함께 이미지 배열을 다루는 데 사용됩니다.
time: 코드 실행 중 대기 시간을 처리하기 위해 사용됩니다.
openpyxl: Excel 파일을 읽고 쓰기 위해 사용됩니다.
os: 파일 시스템 경로 관련 작업에 사용됩니다.
tkinter: GUI 구성을 위해 사용됩니다.
messagebox: tkinter의 메시지 박스를 띄우기 위해 사용됩니다.
Excel 파일 및 시트 설정:

excel_file_path는 Excel 파일의 경로입니다.
load_workbook을 이용해 Excel 파일을 열고, 작업 중인 시트를 sheet = wb.active로 설정합니다.
설정 및 상수:

max_retries: 각 이미지 검색 시도 최대 재시도 횟수를 의미합니다.
scales: 이미지 검색 시 다양한 스케일을 사용하여 템플릿 매칭을 시도합니다.
find_image_on_screen 함수:

전체 화면의 스크린샷을 찍은 후, 그것을 회색조 이미지로 변환합니다.
지정된 이미지(template_path)를 읽어 템플릿 매칭에 사용합니다.
이미지가 4채널(BGRA)인 경우, BGR로 변환합니다.
다양한 크기로 스케일된 템플릿을 사용하여 스크린샷에서 이미지 검색을 시도하고, 매치된 경우 위치와 크기를 반환합니다.
start_search 함수:

이미지 검색을 주기적으로 수행합니다.
Excel 파일에서 경로를 순차적으로 읽고 검색하며, 특정 시간(입력된 간격)마다 재시도합니다.
각 이미지가 발견되면, 이미지의 중심에 마우스를 이동하여 클릭합니다.
클릭 성공 여부를 Excel 파일의 B열에 기록합니다.
첫 번째 이미지를 찾으면, 지정된 주기만큼 대기 후 검색을 다시 시작합니다.
GUI 설정:

run_gui 함수는 tkinter를 사용하여 검색 주기를 입력받는 간단한 인터페이스를 제공합니다.
사용자가 양의 정수로 주기를 입력하고 "시작" 버튼을 눌러 검색을 시작합니다.
프로그램 시작:

run_gui 함수를 호출하여 인터페이스를 띄우고, 사용자가 설정한 주기대로 이미지를 검색 및 클릭하는 프로세스를 실행합니다.
이 코드에서 중요한 점은 정확한 이미지 템플릿과 화면 스크린샷 해상도에 맞춰야 한다는 것입니다. 잘못된 스케일이나 해상도로 인해 이미지를 찾지 못할 수도 있으며, tkinter GUI를 통해 사용자 친화적인 방식으로 설정할 수 있도록 돕습니다.
